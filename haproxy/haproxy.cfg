global
        daemon                                   # 守护进程
        nbproc "${CPU_CORES}"                    # 指定作为守护进程运行时的进程数，推荐设置为与CPU核心数相同
        group nobody
        user nobody
        maxconn 20480                            # 限制单个进程的最大连接数 
        pidfile /var/run/haproxy.pid
        ulimit-n 65536
        #debug
        #quiet


defaults
		log global 
        mode http                                # 默认的模式mode { tcp|http|health }，tcp是4层，http是7层，health只会返回OK
        retries 2                                # 两次连接失败就认为是服务器不可用，也可以通过后面设置
        option redispatch                        # 当serverId对应的服务器挂掉后，强制定向到其他健康的服务器
        option abortonclose                      # 当服务器负载很高的时候，自动结束掉当前队列处理比较久的链接
        option dontlognull                       # 不记录健康检查的日志信息
        timeout connect 5000ms                   # 连接超时
        timeout client 10000ms                   # 客户端超时
        timeout server 10000ms                   # 服务器超时
        #timeout check 2000                      # 心跳检测超时
		option http-keep-alive
		option http-server-close
		timeout http-keep-alive 60000ms			 # 长连接超时时间
        balance roundrobin                       # 负载均衡算法
        log 127.0.0.1 local0 err                 # [err warning info debug]

userlist UsersForUI
        user admin insecure-password password

listen localhost
        bind 0.0.0.0:80                          # 监听端口
        bind-process 1                           # 在多进程下，只跑在1颗CPU上
        mode http                                # http的7层模式
        option httplog                           # 采用http日志格式
        option httpclose						 # 每次请求完毕后主动关闭http通道
        balance leastconn                        # 负载均衡算法
        maxconn 10                               # 最大连接数
		http-request set-header X-Forwarded-Port %[dst_port]
		http-request add-header X-Forwarded-Proto https if { ssl_fc }
		option httpchk HEAD / HTTP/1.1\r\nHost:localhost
        option forwardfor                        # 带client IP给后端
		stats enable							 # 启用统计
        stats refresh 30s                        # 统计页面自动刷新时间
        stats uri /                              # 统计页面url
        stats realm Haproxy\ Statistics          # 统计页面密码框上提示文本
        stats auth root:password                 # 统计页面用户名和密码设置
        stats auth admin:password                # 统计页面用户名和密码设置
        stats hide-version                       # 隐藏统计页面上HAProxy的版本信息

listen jenkins
        bind 0.0.0.0:7004                        # 监听端口
        mode http                                # http的7层模式
        option httplog                           # 采用http日志格式
        option httpclose                         # 每次请求完毕后主动关闭http通道
        option forwardfor                        # 带client IP给后端
		http-request set-header X-Forwarded-Port %[dst_port]
		http-request add-header X-Forwarded-Proto https if { ssl_fc }
		option httpchk GET /robots.txt
		cookie HASVRID      					 # 允许插入HASVRID到cookie中, server根据cookie选择
        server s1 jenkins:8080 maxconn 10000 cookie s1 check inter 3s rise 2 fall 3 weight 1
        #acl login-auth http_auth(UsersForUI)
        #http-request auth realm UIAuth unless login-auth

listen mysql
        bind 0.0.0.0:3306
        mode tcp
        option tcplog                            # 采用tcp日志格式
		balance source                  		 # 默认的负载均衡的方式,类似nginx的ip_hash 
        server s1 mysql:3306 maxconn 10000 check inter 3s rise 2 fall 3 weight 1


listen redis
        bind 0.0.0.0:6379
        mode tcp
        option tcplog                            # 采用tcp日志格式
		balance source                  		 # 默认的负载均衡的方式,类似nginx的ip_hash 
        server s1 redis:6379 maxconn 10000 check inter 3s rise 2 fall 3 weight 1

listen mongo
        bind 0.0.0.0:27017
        mode tcp
        option tcplog                            # 采用tcp日志格式
        balance source                           # 默认的负载均衡的方式,类似nginx的ip_hash
        server s1 mongo:27017 maxconn 10000 check inter 3s rise 2 fall 3 weight 1

listen mongo-express
        bind 0.0.0.0:7008                        # 监听端口
        mode http                                # http的7层模式
        option httplog                           # 采用http日志格式
        option httpclose                         # 每次请求完毕后主动关闭http通道
        option forwardfor                        # 带client IP给后端
        http-request set-header X-Forwarded-Port %[dst_port]
        http-request add-header X-Forwarded-Proto https if { ssl_fc }
        cookie HASVRID                           # 允许插入HASVRID到cookie中, server根据cookie选择
        server s1 mongo-express:8081 maxconn 10000 cookie s1 check inter 3s rise 2 fall 3 weight 1

listen rabbitmq-management
        bind 0.0.0.0:5672
        mode tcp
        option tcplog                            # 采用tcp日志格式
        balance source                           # 默认的负载均衡的方式,类似nginx的ip_hash
        server s1 rabbitmq-management:5672 maxconn 10000 check inter 3s rise 2 fall 3 weight 1

listen rabbitmq-express
        bind 0.0.0.0:7007                        # 监听端口
        mode http                                # http的7层模式
        option httplog                           # 采用http日志格式
        option httpclose                         # 每次请求完毕后主动关闭http通道
        option forwardfor                        # 带client IP给后端
        http-request set-header X-Forwarded-Port %[dst_port]
        http-request add-header X-Forwarded-Proto https if { ssl_fc }
        option httpchk GET /
        cookie HASVRID                           # 允许插入HASVRID到cookie中, server根据cookie选择
        server s1 rabbitmq-management:15672 maxconn 10000 cookie s1 check inter 3s rise 2 fall 3 weight 1

listen postgres
        bind 0.0.0.0:5432
        mode tcp
        option tcplog                            # 采用tcp日志格式
        balance source                           # 默认的负载均衡的方式,类似nginx的ip_hash
        server s1 postgres:5432 maxconn 10000 check inter 3s rise 2 fall 3 weight 1

listen adminer
        bind 0.0.0.0:7009                        # 监听端口
        mode http                                # http的7层模式
        option httplog                           # 采用http日志格式
        option httpclose                         # 每次请求完毕后主动关闭http通道
        option forwardfor                        # 带client IP给后端
        http-request set-header X-Forwarded-Port %[dst_port]
        http-request add-header X-Forwarded-Proto https if { ssl_fc }
        option httpchk GET /
        cookie HASVRID                           # 允许插入HASVRID到cookie中, server根据cookie选择
        server s1 adminer:8080 maxconn 10000 cookie s1 check inter 3s rise 2 fall 3 weight 1

listen memcached
        bind 0.0.0.0:11211
        mode tcp
        option tcplog                            # 采用tcp日志格式
        balance source                           # 默认的负载均衡的方式,类似nginx的ip_hash
        server s1 memcached:11211 maxconn 10000 check inter 3s rise 2 fall 3 weight 1

